{"version":3,"sources":["port-config.js","GlobalState.js","components/Message.js","components/Greet.js","fetchData.js","config.js","components/WeatherForecast.js","components/Weather.js","components/DateAndEvents.js","components/Calendar.js","components/TaskList.js","components/ThemeToggle.js","components/Preferences.js","Utils.js","components/UtilTabs.js","components/Navbar.js","App.js","GlobalReducer.js","InitialState.js","index.js"],"names":["StateContext","createContext","useStateValue","useContext","displayMsg","dispatch","useState","fadeIn","setFadeIn","bool","msg","useEffect","type","value","setTimeout","Fade","in","tag","className","style","justifyContent","zIndex","require","config","userInfo","fetchDisplayName","a","process","axios","get","res","newUsername","name","PORT","port_config","fetchWeather","geoSuccess","position","lat","coords","latitude","lng","longitude","weatherUrl","then","weatherData","data","weather","console","log","catch","err","navigator","geolocation","getCurrentPosition","fetchEvents","events","WeatherForecast","Button","onClick","bind","EventDescription","date","handleClick","eventList","eventColors","sport","social","outdoors","toDateString","map","event","eventColor","eventType","toLowerCase","key","id","backgroundColor","eventName","CalendarApp","eventsToday","setEventsToday","datePicked","filterEvents","filter","day","month","getDate","getMonth","onChange","newDate","minDate","Date","maxDate","DateAndEvents","getItemStyle","isDragging","draggableStyle","userSelect","padding","grid","margin","borderRadius","background","TaskList","tasks","newTask","setNewTask","display","Input","placeholder","e","target","preventDefault","getTime","content","onDragEnd","result","destination","reorderedItems","list","startIndex","endIndex","Array","from","splice","removed","reorder","source","index","droppableId","provided","snapshot","droppableProps","ref","innerRef","isDraggingOver","item","draggableId","draggableProps","dragHandleProps","ThemeToggle","theme","body","document","querySelector","initColor","window","getComputedStyle","newTheme","newColor","Preferences","UtilTabs","history","useHistory","location","useLocation","tabIndex","utils","indexOf","pathname","slice","onSelect","push","selectedIndex","Weather","isOpen","setIsOpen","Navbar","color","light","expand","NavbarBrand","href","NavbarToggler","Collapse","navbar","Nav","NavItem","NavLink","UncontrolledDropdown","nav","inNavbar","DropdownToggle","caret","DropdownMenu","right","DropdownItem","divider","App","loggedIn","fetchTasks","post","sendToBackend","JSON","stringify","Message","Greet","stateUpdate","changeUserInfo","switchTab","updateWeather","updateEvents","changeDate","updateTasks","changeTheme","selectedTab","Utils","ReactDOM","render","reducer","initialState","children","Provider","useReducer","state","action","newState","b","getElementById"],"mappings":"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","file":"static/js/main.76d4b1bd.chunk.js","sourcesContent":["export default {\r\n  // API address\r\n  PORT: \"localhost:4000\"\r\n};\r\n","import React, { createContext, useContext, useReducer } from \"react\";\r\n\r\nexport const StateContext = createContext();\r\n\r\nexport const StateProvider = ({ reducer, initialState, children }) => (\r\n  <StateContext.Provider value={useReducer(reducer, initialState)}>\r\n    {children}\r\n  </StateContext.Provider>\r\n);\r\nexport const useStateValue = () => useContext(StateContext);\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Fade } from \"reactstrap\";\r\nimport { useStateValue } from \"../GlobalState\";\r\n\r\nexport default () => {\r\n  const [{ displayMsg }, dispatch] = useStateValue();\r\n  const [fadeIn, setFadeIn] = useState(false);\r\n\r\n  const [bool, msg] = displayMsg;\r\n  useEffect(() => {\r\n    if (bool && msg) {\r\n      dispatch({ type: \"displayMsg\", value: [false, msg] });\r\n      setFadeIn(true);\r\n      setTimeout(() => {\r\n        setFadeIn(false);\r\n      }, 4000);\r\n    }\r\n  }, [bool, msg]);\r\n\r\n  return (\r\n    <Fade\r\n      in={fadeIn}\r\n      tag=\"h5\"\r\n      className=\"mt-3\"\r\n      style={{ justifyContent: \"center\", zIndex: 2 }}\r\n    >\r\n      {msg}\r\n    </Fade>\r\n  );\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useStateValue } from \"../GlobalState\";\r\nrequire(\"dotenv\").config();\r\n\r\nexport default () => {\r\n  const [{ userInfo }, dispatch] = useStateValue();\r\n  // const [username, setUsername] = useState(\"Guest\");\r\n\r\n  const fetchDisplayName = async () => {\r\n    let env = process.env.NODE_ENV;\r\n    let newUsername;\r\n    if (env === \"development\") {\r\n      newUsername = \"James\";\r\n    } else {\r\n      const res = await axios.get(\"/user/name\");\r\n      newUsername = res.name;\r\n    }\r\n    dispatch({\r\n      type: \"changeUserInfo\",\r\n      userInfo: { ...userInfo, name: newUsername }\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchDisplayName();\r\n  }, []);\r\n\r\n  return (\r\n    <header className=\"App-header\">\r\n      Welcome to QuickUtils&trade;, {userInfo.name}!\r\n    </header>\r\n  );\r\n};\r\n","import axios from \"axios\";\r\nimport port_config from \"./port-config\";\r\nimport { apiKey } from \"./config\";\r\n\r\nconst PORT = port_config.PORT;\r\n\r\nconst name = \"John\";\r\n\r\nexport const fetchWeather = dispatch => {\r\n  const geoSuccess = async position => {\r\n    // Get user location\r\n    const lat = position.coords.latitude;\r\n    const lng = position.coords.longitude;\r\n\r\n    // URL for 5-day forecast\r\n    let weatherUrl = `https://api.openweathermap.org/data/2.5/forecast?lat=${lat}&lon=${lng}&appid=${apiKey}`;\r\n\r\n    // Fetch weather data for user location\r\n    await axios\r\n      .get(weatherUrl)\r\n      .then(res => {\r\n        // const { main, weather, wind } = res.data;\r\n        // const weatherData = { main, weather, wind };\r\n        const weatherData = res.data;\r\n\r\n        // Update weather if successful\r\n        dispatch({ type: \"updateWeather\", weather: weatherData });\r\n        console.log(weatherData);\r\n      })\r\n      .catch(err => {\r\n        // Display error if weather fetching fails\r\n        dispatch({\r\n          type: \"displayMsg\",\r\n          value: [true, \"Failed to fetch weather data.\"]\r\n        });\r\n      });\r\n  };\r\n\r\n  const geoError = () => {\r\n    console.log(\"Cannot get geolocation. Check https protocol\");\r\n  };\r\n\r\n  navigator.geolocation.getCurrentPosition(geoSuccess, geoError);\r\n};\r\n\r\nexport const fetchEvents = dispatch => {\r\n  axios\r\n    .get(`http://${PORT}/users/${name}/events`)\r\n    .then(res => {\r\n      // Update event list after fetch\r\n      dispatch({\r\n        type: \"updateEvents\",\r\n        events: res.data.events\r\n      });\r\n    })\r\n    .catch(err => {\r\n      // Display error if fetch fails\r\n      dispatch({\r\n        type: \"displayMsg\",\r\n        value: [true, \"Failed to fetch calendar data.\"]\r\n      });\r\n    });\r\n};\r\n\r\nexport const fetchTasks = dispatch => {\r\n  axios\r\n    .get(`http://${PORT}/users/${name}/tasks`)\r\n    .then(res => {\r\n      // Update task list after fetch\r\n      dispatch({\r\n        type: \"updateTasks\",\r\n        events: res.data.tasks\r\n      });\r\n    })\r\n    .catch(err => {\r\n      // Display error if fetch fails\r\n      dispatch({\r\n        type: \"displayMsg\",\r\n        value: [true, \"Failed to fetch tasks.\"]\r\n      });\r\n    });\r\n};\r\n","export const apiKey = \"d15c1e96091187473b96203daebc8c2f\";\r\n","import React from \"react\";\r\nimport { useStateValue } from \"../GlobalState\";\r\n\r\nconst WeatherForecast = () => {\r\n  const [{ weather }, dispatch] = useStateValue();\r\n\r\n  // const forecast = weather ? weather.weather[0].main : \"asdf\";\r\n\r\n  return <div>{\"placeholder\"}</div>;\r\n};\r\n\r\nexport default WeatherForecast;\r\n","import React from \"react\";\r\nimport { Button } from \"reactstrap\";\r\nimport { useStateValue } from \"../GlobalState\";\r\nimport { fetchWeather } from \"../fetchData\";\r\nimport WeatherForecast from \"./WeatherForecast\";\r\n\r\nexport default () => {\r\n  const [{ weather }, dispatch] = useStateValue();\r\n\r\n  return (\r\n    <>\r\n      <Button onClick={fetchWeather.bind(null, dispatch)}>Refresh</Button>\r\n      <WeatherForecast />\r\n    </>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport \"./Calendar.css\";\r\nimport \"./CalendarComponent.css\";\r\n\r\nimport { Button } from \"reactstrap\";\r\n\r\nconst EventDescription = ({ date, events, handleClick }) => {\r\n  const eventList = events ? events : [];\r\n  const eventColors = {\r\n    sport: \"blue\",\r\n    social: \"pink\",\r\n    outdoors: \"green\"\r\n  };\r\n\r\n  return (\r\n    <div className=\"Calendar-date-column\">\r\n      <div className=\"Calendar-details\">The date and time is: </div>\r\n      <div className=\"Calendar-details\">\r\n        <h3>{date.toDateString()}</h3>\r\n      </div>\r\n      <div className=\"Calendar-details\">\r\n        Your events\r\n        <Button onClick={handleClick} className=\"refresh-button\">\r\n          Refresh\r\n        </Button>\r\n      </div>\r\n\r\n      {eventList.map(event => {\r\n        const eventColor = eventColors[event.eventType.toLowerCase()];\r\n        return (\r\n          <div\r\n            className=\"Calendar-events\"\r\n            key={event.id}\r\n            style={{ backgroundColor: eventColor }}\r\n          >\r\n            {event.eventName}\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EventDescription;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Calendar from \"react-calendar\";\r\nimport \"./Calendar.css\";\r\nimport \"./CalendarComponent.css\";\r\nimport DateAndEvents from \"./DateAndEvents\";\r\nimport { useStateValue } from \"../GlobalState\";\r\nimport { fetchEvents } from \"../fetchData\";\r\n\r\nconst CalendarApp = () => {\r\n  const [eventsToday, setEventsToday] = useState();\r\n  const [{ datePicked, events }, dispatch] = useStateValue();\r\n\r\n  // Filter events for a specific date\r\n  const filterEvents = (events, date) => {\r\n    if (events) {\r\n      setEventsToday(\r\n        events.filter(({ day, month }) => {\r\n          return day === date.getDate() && month === date.getMonth();\r\n        })\r\n      );\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Fetch today's events\r\n    fetchEvents(dispatch);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    // Re-filter events when events are updated (e.g. after refresh)\r\n    filterEvents(events, datePicked);\r\n  }, [events]);\r\n\r\n  const onChange = date => {\r\n    // Update date and find events for that date\r\n    dispatch({ type: \"changeDate\", newDate: date });\r\n    filterEvents(events, date);\r\n  };\r\n\r\n  return (\r\n    <div className=\"Calendar\">\r\n      <Calendar\r\n        value={datePicked}\r\n        onChange={onChange}\r\n        minDate={new Date(2001, 0, 1)}\r\n        maxDate={new Date(2050, 11, 31)}\r\n        className={[\"Calendar-component\"]}\r\n      />\r\n      <DateAndEvents\r\n        date={datePicked}\r\n        events={eventsToday}\r\n        handleClick={fetchEvents.bind(null, dispatch)}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CalendarApp;\r\n","import React, { useState } from \"react\";\r\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\r\nimport { Input, Button } from \"reactstrap\";\r\nimport { useStateValue } from \"../GlobalState\";\r\nimport \"../App.css\";\r\n\r\n// a little function to help us with reordering the result\r\nconst reorder = (list, startIndex, endIndex) => {\r\n  const result = Array.from(list);\r\n  const [removed] = result.splice(startIndex, 1);\r\n  result.splice(endIndex, 0, removed);\r\n\r\n  return result;\r\n};\r\n\r\nconst grid = 8;\r\n\r\nconst getItemStyle = (isDragging, draggableStyle) => ({\r\n  // some basic styles to make the items look a bit nicer\r\n  userSelect: \"none\",\r\n  padding: grid * 2,\r\n  margin: `0 0 ${grid}px 0`,\r\n  borderRadius: `5px`,\r\n\r\n  // change background colour if dragging\r\n  background: isDragging ? \"lightgreen\" : \"grey\",\r\n\r\n  // styles we need to apply on draggables\r\n  ...draggableStyle\r\n});\r\n\r\nconst getListStyle = isDraggingOver => ({\r\n  background: isDraggingOver ? \"lightblue\" : \"lightgrey\",\r\n  padding: grid,\r\n  borderRadius: `5px`\r\n  // width: 250\r\n});\r\n\r\nconst TaskList = () => {\r\n  const [{ tasks }, dispatch] = useStateValue();\r\n  const [newTask, setNewTask] = useState(\"\");\r\n\r\n  const onDragEnd = result => {\r\n    // dropped outside the list\r\n    if (!result.destination) {\r\n      return;\r\n    }\r\n    const reorderedItems = reorder(\r\n      tasks,\r\n      result.source.index,\r\n      result.destination.index\r\n    );\r\n\r\n    // const newTasks = Array.from(tasks);\r\n\r\n    dispatch({ type: \"updateTasks\", tasks: reorderedItems });\r\n  };\r\n\r\n  // Normally you would want to split things out into separate components.\r\n  // But in this example everything is just done in one place for simplicity\r\n  return (\r\n    <>\r\n      <form style={{ display: \"flex\" }}>\r\n        <Input\r\n          placeholder=\"New task...\"\r\n          style={{ margin: \"20px 10px 20px 0\" }}\r\n          onChange={e => {\r\n            setNewTask(e.target.value);\r\n          }}\r\n          value={newTask}\r\n        />\r\n        <button\r\n          type=\"submit\"\r\n          className=\"btn btn-primary\"\r\n          onClick={e => {\r\n            e.preventDefault();\r\n            dispatch({\r\n              type: \"updateTasks\",\r\n              tasks: [{ id: new Date().getTime(), content: newTask }, ...tasks]\r\n            });\r\n            setNewTask(\"\");\r\n          }}\r\n          style={{ margin: \"20px 0\" }}\r\n        >\r\n          Submit\r\n        </button>\r\n      </form>\r\n\r\n      {/* drag and drop task list */}\r\n      <DragDropContext onDragEnd={onDragEnd}>\r\n        <Droppable droppableId=\"droppable\">\r\n          {(provided, snapshot) => (\r\n            <div\r\n              {...provided.droppableProps}\r\n              ref={provided.innerRef}\r\n              style={getListStyle(snapshot.isDraggingOver)}\r\n            >\r\n              {tasks.map((item, index) => (\r\n                <Draggable key={item.id} draggableId={item.id} index={index}>\r\n                  {(provided, snapshot) => (\r\n                    <div\r\n                      ref={provided.innerRef}\r\n                      {...provided.draggableProps}\r\n                      {...provided.dragHandleProps}\r\n                      style={getItemStyle(\r\n                        snapshot.isDragging,\r\n                        provided.draggableProps.style\r\n                      )}\r\n                    >\r\n                      {item.content}\r\n                    </div>\r\n                  )}\r\n                </Draggable>\r\n              ))}\r\n              {provided.placeholder}\r\n            </div>\r\n          )}\r\n        </Droppable>\r\n      </DragDropContext>\r\n    </>\r\n  );\r\n};\r\n\r\n// Put the thing into the DOM!\r\nexport default TaskList;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useStateValue } from \"../GlobalState\";\r\nimport { Button } from \"reactstrap\";\r\nimport \"../App.css\";\r\n\r\nconst ThemeToggle = () => {\r\n  const darkTheme = \"rgb(40, 44, 52)\";\r\n  const lightTheme = \"rgb(194, 214, 255)\";\r\n  const [{ theme }, dispatch] = useStateValue(darkTheme);\r\n\r\n  useEffect(() => {\r\n    const body = document.querySelector(\"body\");\r\n    const initColor = window.getComputedStyle(body).backgroundColor;\r\n    if (initColor === \"rgb(40, 44, 52)\") {\r\n      dispatch({ type: \"changeTheme\", newTheme: \"dark\" });\r\n    } else {\r\n      dispatch({ type: \"changeTheme\", newTheme: \"light\" });\r\n    }\r\n  }, []);\r\n\r\n  // Toggle dark/light mode\r\n  const changeBgColor = () => {\r\n    const newColor = theme === \"dark\" ? lightTheme : darkTheme;\r\n    const newTheme = theme === \"dark\" ? \"light\" : \"dark\";\r\n    document.body.style.backgroundColor = newColor;\r\n\r\n    dispatch({ type: \"changeTheme\", newTheme });\r\n  };\r\n\r\n  const buttonName = () => {\r\n    return theme === \"dark\" ? \"Switch to light theme\" : \"Switch to dark theme\";\r\n  };\r\n\r\n  return (\r\n    <Button onClick={changeBgColor} className=\"theme-toggle\">\r\n      {buttonName()}\r\n    </Button>\r\n  );\r\n};\r\n\r\nexport default ThemeToggle;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport ThemeToggle from \"./ThemeToggle\";\r\nimport \"../App.css\";\r\n\r\nconst Preferences = () => {\r\n  useEffect(() => {}, []);\r\n\r\n  return (\r\n    <>\r\n    <ThemeToggle />\r\n    \r\n    </>\r\n  );\r\n};\r\n\r\nexport default Preferences;\r\n","export default [\"weather\", \"calendar\", \"tasklist\", \"preferences\"];\r\n","import React from \"react\";\r\nimport { Tab, Tabs, TabList, TabPanel } from \"react-tabs\";\r\nimport { useHistory, useLocation } from \"react-router-dom\";\r\n\r\nimport Weather from \"./Weather\";\r\nimport Calendar from \"./Calendar\";\r\nimport TaskList from \"./TaskList\";\r\nimport Preferences from \"./Preferences\";\r\nimport utils from \"../Utils\";\r\nimport \"react-tabs/style/react-tabs.css\";\r\n\r\nconst UtilTabs = () => {\r\n  const history = useHistory();\r\n  const location = useLocation();\r\n  const tabIndex = utils.indexOf(location.pathname.slice(1));\r\n\r\n  const onSelect = tabIndex => {\r\n    history.push(`/${utils[tabIndex]}`);\r\n  };\r\n\r\n  return (\r\n    <Tabs onSelect={onSelect} selectedIndex={tabIndex}>\r\n      <TabList>\r\n        <Tab>Weather</Tab>\r\n        <Tab>Calendar</Tab>\r\n        <Tab>Task List</Tab>\r\n        <Tab>Preferences</Tab>\r\n        {/* Dictionary */}\r\n      </TabList>\r\n\r\n      <TabPanel>\r\n        <Weather />\r\n      </TabPanel>\r\n      <TabPanel>\r\n        <Calendar />\r\n      </TabPanel>\r\n      <TabPanel>\r\n        <TaskList />\r\n      </TabPanel>\r\n      <TabPanel>\r\n        <Preferences />\r\n      </TabPanel>\r\n    </Tabs>\r\n  );\r\n};\r\n\r\nexport default UtilTabs;\r\n","import React, { useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {\r\n  Collapse,\r\n  Navbar,\r\n  NavbarToggler,\r\n  NavbarBrand,\r\n  Nav,\r\n  NavItem,\r\n  NavLink,\r\n  UncontrolledDropdown,\r\n  DropdownToggle,\r\n  DropdownMenu,\r\n  DropdownItem\r\n} from \"reactstrap\";\r\n\r\nexport default () => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n  const toggle = () => setIsOpen(!isOpen);\r\n\r\n  let history = useHistory();\r\n\r\n  const onClickHome = e => {\r\n    e.preventDefault();\r\n    history.push('/')\r\n  };\r\n\r\n  return (\r\n    <Navbar color=\"light\" light expand=\"md\">\r\n      <NavbarBrand onClick={onClickHome} href=\"/\">\r\n        QuickUtils\r\n      </NavbarBrand>\r\n      <NavbarToggler onClick={toggle} />\r\n      <Collapse isOpen={isOpen} navbar>\r\n        <Nav className=\"ml-auto\" navbar>\r\n          <NavItem>\r\n            <NavLink\r\n              target=\"_blank\"\r\n              href=\"https://github.com/reactstrap/reactstrap\"\r\n            >\r\n              reactstrap GitHub\r\n            </NavLink>\r\n          </NavItem>\r\n          <UncontrolledDropdown nav inNavbar>\r\n            <DropdownToggle nav caret>\r\n              Sign in\r\n            </DropdownToggle>\r\n            <DropdownMenu right>\r\n              <DropdownItem href=\"/auth/google\">Google</DropdownItem>\r\n              <DropdownItem href=\"/auth/github\">Github</DropdownItem>\r\n              <DropdownItem divider />\r\n              <DropdownItem href=\"/\">Home</DropdownItem>\r\n            </DropdownMenu>\r\n          </UncontrolledDropdown>\r\n        </Nav>\r\n      </Collapse>\r\n    </Navbar>\r\n  );\r\n};\r\n","import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport \"./App.css\";\nimport port_config from \"./port-config\";\nimport Message from \"./components/Message\";\nimport Greet from \"./components/Greet\";\nimport UtilTabs from \"./components/UtilTabs\";\nimport Navbar from \"./components/Navbar\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport { useStateValue } from \"./GlobalState\";\nimport { fetchWeather, fetchEvents, fetchTasks } from \"./fetchData\";\n\nconst PORT = port_config.PORT;\n\nconst App = () => {\n  const [{ loggedIn, events, tasks, theme }, dispatch] = useStateValue();\n  const data = { loggedIn, events, tasks, theme };\n\n  const sendToBackend = data => {\n    // Send post request to backend when user changes data\n    axios\n      .post(`http://${PORT}/app-data`, { data })\n      .catch(err => console.log(\"Error in post request\"));\n  };\n\n  useEffect(() => {\n    fetchWeather(dispatch);\n    fetchEvents(dispatch);\n    fetchTasks(dispatch);\n  }, []);\n\n  useEffect(() => {\n    sendToBackend(data);\n  }, [JSON.stringify(data)]);\n\n  return (\n    <Router>\n      <Navbar />\n      <Message />\n      <div className=\"App\">\n        <Greet />\n        <UtilTabs />\n      </div>\n    </Router>\n  );\n};\n\nexport default App;\n","// Object literal for updating the state\r\nconst stateUpdate = {\r\n  changeUserInfo: [\"userInfo\", \"userInfo\"],\r\n  switchTab: [\"selectedTab\", \"selectedTab\"],\r\n  displayMsg: [\"displayMsg\", \"value\"],\r\n  updateWeather: [\"weather\", \"weather\"],\r\n  updateEvents: [\"events\", \"events\"],\r\n  changeDate: [\"datePicked\", \"newDate\"],\r\n  updateTasks: [\"tasks\", \"tasks\"],\r\n  changeTheme: [\"theme\", \"newTheme\"]\r\n};\r\n\r\nexport default (state, action) => {\r\n  // Update and return new state\r\n\r\n  if (action.type in stateUpdate) {\r\n    const newState = { ...state };\r\n    const [a, b] = stateUpdate[action.type];\r\n\r\n    if (a in newState && b in action) {\r\n      newState[a] = action[b];\r\n      return newState;\r\n    }\r\n  }\r\n  return state;\r\n};\r\n","import Utils from \"./Utils\";\r\n\r\nexport default {\r\n  // Do not need to send these to backend\r\n  displayMsg: [false, \"No messages to display.\"],\r\n  msg: \"No messages.\",\r\n  userInfo: {\r\n    name: \"Guest\"\r\n  },\r\n  selectedTab: Utils[0],\r\n  weather: null,\r\n  datePicked: new Date(),\r\n\r\n  // Send these to backend\r\n  loggedIn: false,\r\n  events: [],\r\n  tasks: [\r\n    { id: 1, content: \"Vacuum bedroom\" },\r\n    { id: 2, content: \"Finish weather util\" }\r\n  ],\r\n  theme: \"dark\"\r\n};\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { StateProvider } from \"./GlobalState\";\nimport reducer from \"./GlobalReducer\";\nimport initialState from \"./InitialState\";\n\nReactDOM.render(\n  <StateProvider initialState={initialState} reducer={reducer}>\n    <App />\n  </StateProvider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}